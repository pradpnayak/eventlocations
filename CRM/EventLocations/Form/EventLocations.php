<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 5.10                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:e21dfb56b654dd78e0ead9af1ba5bf77)
 */

/**
 *
 */
class CRM_EventLocations_Form_EventLocations extends CRM_Core_Form {
  /**
   * Set variables up before form is built.
   */
  public function preProcess() {
    parent::preProcess();
    $this->_id = CRM_Utils_Request::retrieve('id', 'Positive', $this);
    $this->_locId = CRM_Utils_Request::retrieve('locid', 'Positive', $this);
    $this->setPageTitle('Location');
    if ($this->_action & CRM_Core_Action::DELETE) {
      if (!$this->_locId || !$this->canBeDeleted()) {
        CRM_Core_Error::statusBounce(
          ts('Selected location cannot be deleted since its been either used for event, volunteer etc.'),
          CRM_Utils_System::url(
            'civicrm/eventlocations',
            'reset=1',
            FALSE,
            NULL,
            FALSE
          ),
          ts('Cannot delete location!')
        );
      }
    }
  }

  public function canBeDeleted() {
    $refTables = CRM_Core_DAO::getReferencesToTable('civicrm_loc_block');
    $query = "
      SELECT count(loc.id) as count
      FROM civicrm_loc_block loc
    ";
    $where = ["loc.id = {$this->_locId}"];
    foreach ($refTables as $coreReference) {
      if (!is_a($coreReference, 'CRM_Core_Reference_Dynamic')) {
        $tableName = $coreReference->getReferenceTable();
        $fieldName = $coreReference->getReferenceKey();
        $query .= "\n LEFT JOIN {$tableName}
          ON {$tableName}.{$fieldName} = loc.id ";
        $where[] = " {$tableName}.id IS NULL ";
      }
    }
    $query .= 'WHERE ' . implode(' AND ', $where);
    $count = CRM_Core_DAO::singleValueQuery($query);
    return empty($count);
  }

  public function getDefaultContext() {
    return 'create';
  }

  /**
   * Build the form object.
   */
  public function buildQuickForm() {
    parent::buildQuickForm();
    if ($this->_action & CRM_Core_Action::DELETE) {
      $this->addButtons([
        [
          'type' => 'next',
          'name' => ts('Delete'),
          'isDefault' => TRUE,
        ],
        [
          'type' => 'cancel',
          'name' => ts('Cancel'),
        ],
      ]);
      return;
    }
    $addressSequence = CRM_Core_BAO_Address::addressSequence();
    $this->set('addressSequence', $addressSequence);
    $this->assign('addressSequence', $addressSequence);
    $this->addYesNo('is_active', ts('Is Active?'), NULL, TRUE);
    CRM_Contact_Form_Edit_Address::buildQuickForm($this, 1);
    $this->addButtons([
      [
        'type' => 'next',
        'name' => ts('Save'),
        'isDefault' => TRUE,
      ],
      [
        'type' => 'next',
        'name' => ts('Save and New'),
        'subName' => 'new',
      ],
      [
        'type' => 'cancel',
        'name' => ts('Cancel'),
      ],
    ]);

    $this->addFormRule(array('CRM_EventLocations_Form_EventLocations', 'formRule'), $this);
  }

  /**
   * Global form rule.
   *
   * @param array $fields
   *   The input form values.
   * @param array $files
   *   The uploaded files if any.
   * @param $self
   *
   * @return bool|array
   *   true if no errors, else array of errors
   */
  public static function formRule($fields, $files, $self) {
    if ($self->getVar('_action') & CRM_Core_Action::DELETE) {
    }
    else {
      $errors = CRM_Contact_Form_Edit_Address::formRule($fields);
    }
    return $errors;
  }

  /**
   * Set the default values for the form.
   */
  public function setDefaultValues() {
    $defaults = [];
    if (($this->_action & CRM_Core_Action::DELETE)) {
      return;
    }
    if ($this->_id) {
      foreach (civicrm_api3(
        'Address',
        'getsingle',
        ['id' => $this->_id]
      ) as $key => $value) {
        $defaults["address[1][{$key}]"] = $value;
      }
      $defaults['is_active'] = CRM_EventLocations_Utils::isActive($this->_locId);
    }
    else {
      $defaults['is_active'] = TRUE;
    }
    return $defaults;
  }

  /**
   * Process the form submission.
   */
  public function postProcess() {
    if ($this->_action & CRM_Core_Action::DELETE) {
      try {
        CRM_Core_BAO_Location::deleteLocBlock($this->_locId);
        CRM_Core_Session::setStatus(
          ts('Selected Address Location has been deleted.'),
          ts('Record Deleted'),
          'success'
        );
      }
      catch (CRM_Core_Exception $e) {
        CRM_Core_Error::statusBounce(
          $e->getMessage(),
          CRM_Utils_System::url(
            'civicrm/eventlocations',
            "reset=1&action=browse"
          ),
          ts('Cannot Delete')
        );
      }
    }
    else {
      // store the submitted values in an array
      $params = $this->exportValues();
      try {
        if ($this->_id) {
          $params['address'][1]['id'] = $this->_id;
        }
        $address = CRM_Core_BAO_Address::add($params['address'][1]);
        if (!$this->_id && !empty($address->id)) {
          $this->_locId = civicrm_api3('LocBlock', 'create', [
            'address_id' => $address->id,
          ])['id'];
        }
        CRM_EventLocations_Utils::saveActive($this->_locId, $params['is_active']);
        CRM_Core_Session::setStatus(ts('The Address Location has been saved.'), ts('Saved'), 'success');
      }
      catch (CRM_Core_Exception $e) {
        CRM_Core_Error::statusBounce($e->getMessage());
      }

      $buttonName = $this->controller->getButtonName();
      $session = CRM_Core_Session::singleton();

      if ($buttonName == $this->getButtonName('next', 'new')) {
        CRM_Core_Session::setStatus(ts(' You can add another Location.'));
        $session->replaceUserContext(CRM_Utils_System::url('civicrm/eventlocations',
          "reset=1&action=add")
        );
      }
      else {
        $session->replaceUserContext(CRM_Utils_System::url('civicrm/eventlocations',
          "reset=1&action=browse")
        );
      }
    }
  }

}
